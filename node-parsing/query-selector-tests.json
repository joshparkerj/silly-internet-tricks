[
  {"name": "finds main tag", "assertions": [{"query": "main", "textContent": "THIS IS THE MAIN"}]},
  {"name": "error on empty query", "assertions": [{"query": "", "throws": true}]},
  {"name": "error on combinator prefix", "assertions": [{"query": "> body", "throws": true}]},
  {"name": "error on combinator suffix", "assertions": [{"query": "body >", "throws": true}]},
  {"name": "finds child of p", "assertions": [{"query": "p a", "textContent": "this a is in the p in the div"}]},
  {"name": "finds child of p which is child of div", "assertions": [{"query": "div p a", "textContent": "this a is in the p in the div"}]},
  {"name": "finds element with class cool-class", "assertions": [{"query": ".cool-class", "textContent": "THIS IS THE COOL CLASS"}]},
  {"name": "finds span with correct class", "assertions": [{"query": "span.b", "textContent": "banana"}]},
  {"name": "finds class d with correct tag name", "assertions": [{"query": "strong.d", "textContent": "d mighty"}]},
  {"name": "finds descendant", "assertions": [{"query": "footer span", "textContent": "footer text"}]},
  {"name": "finds descendant with class names specified", "assertions": [{"query": "footer.end span.end-inline", "textContent": "footer text"}]},
  {"name": "correctly navigates relationships between class parents and children", "assertions": [
    {"query": ".good .good", "textContent": "GOODGOOD"},
    {"query": ".good .bad", "textContent": "GOODBAD"},
    {"query": ".bad .good", "textContent": "BADGOOD"},
    {"query": ".bad .bad", "textContent": "BADBAD"}
  ]},
  {"name": "finds the element with an id", "assertions": [{"query": "#an-id", "textContent": "I have an id."}]},
  {"name": "finds the element with a class and a parent with an id", "assertions": [{"query": "#bad .bad", "textContent": "id BADBAD"}]},
  {"name": "finds the link with the href attribute", "assertions": [{"query": "a[href]", "textContent": "a with an href"}]},
  {"name": "finds the first matching element", "assertions": [{"query": "ol li", "textContent": "one"}]},
  {"name": "finds the earlier element, not the shallower one", "assertions": [{"query": ".depth", "textContent": "this is the deep div early in the document"}]},
  {"name": "null on element without child", "assertions": [{"query": "#an-id div", "isNull": true}]},
  {"name": "finds element with attribute exact match", "assertions": [{"query": "label[name=three]", "textContent": "label name three"}]},
  {"name": "finds element with attribute word match", "assertions": [{"query": "abbr[title~=Federal]", "textContent": "FBI"}]},
  {"name": "finds element with attribute word match even without closing square bracket", "assertions": [{"query": "abbr[title~=Federal","textContent": "FBI"}]},
  {"name": "finds element with attribute prefix match", "assertions": [{"query": "abbr[title^=Fed]", "textContent": "FBI"}]},
  {"name": "finds element with attribute suffix match", "assertions": [{"query": "abbr[title$=cy]", "textContent": "CIA"}]},
  {"name": "finds element with attribute contains match", "assertions": [{"query": "abbr[title*=lig]", "textContent": "CIA"}]},
  {"name": "works with shouty tag names", "assertions": [{"query": "DIV P ABBR[title^=Fed]", "textContent": "FBI"}]},
  {"name": "can match attribute without tagname", "assertions": [{"query": "[title^=Fed]", "textContent": "FBI"}]},
  {"name": "can match attribute with universal selector", "assertions": [{"query": "*[title^=Fed]", "textContent": "FBI"}]},
  {"name": "can match descendant with universal selector", "assertions": [{"query": "head *", "textContent": "THIS IS THE TITLE"}]},
  {"name": "can match child attribute without tagname", "assertions": [{"query": "DIV P [title^=Fed]", "textContent": "FBI"}]},
  {"name": "can match descendant attribute without tagname", "assertions": [{"query": "DIV [title^=Fed]", "textContent": "FBI"}]},
  {"name": "does not match descendent when using child combinator", "assertions": [{"query": "DIV > [title^=Fed]", "isNull": true}]},
  {"name": "matches child when using child combinator", "assertions": [{"query": "DIV > P > [title^=Fed]", "textContent": "FBI"}]},
  {"name": "matches sibling when using general sibling combinator", "assertions": [{"query": "[title^=Fed] ~ *", "textContent": "CIA"}]},
  {"name": "matches immediate sibling when using adjacent sibling combinator", "assertions": [{"query": "[name=three] + *", "textContent": "label name four"}]},
  {"name": "matches immediate sibling by attribute when using adjacent sibling combinator", "assertions": [{"query": "[name=three] + [name=four]", "textContent": "label name four"}]},
  {"name": "does not match non-immediate sibling when using adjacent sibling combinator", "assertions": [{"query": "[name=three] + [name=five]", "isNull": true}]},
  {"name": "matches non-immediate sibling when using general sibling combinator", "assertions": [{"query": "[name=three] ~ [name=five]", "textContent": "label name five"}]},
  {"name": "does not match child or descendent when using sibling combinators", "assertions": [
    {"query": "p.good + span.good", "isNull": true},
    {"query": "p.good ~ span.good", "isNull": true},
    {"query": "footer.end + span.end-inline", "isNull": true},
    {"query": "footer.end ~ span.end-inline", "isNull": true}
  ]},
  {"name":"can use selector list", "assertions": [
    {"query": "p span    ,  p a", "textContent": "this a is in the p in the div"},
    {"query": "p a    ,  p span", "textContent": "this a is in the p in the div"}
  ]},
  {"name": "can match element with two attribute selectors", "assertions": [{"query": "*[colspan=2][id=fish]", "textContent": "Fish"}]}
]
